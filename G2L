local Players = game:GetService("Players")
local Player = Players.LocalPlayer
print("GUI Copier Started")
local Settings_NoCrash = false

-- Utility functions
local isfile = isfile or function() return false end
local writefile = writefile or function() end
local readfile = readfile or function() return "" end

local spawn, wait = task.spawn, task.wait
local tinsert, tfind = table.insert, table.find
local format, sub = string.format, string.sub

-- Ignore these properties (mostly events and internal stuff)
local IGNORED_PROPERTIES = {
    "InputBegan", "InputChanged", "InputEnded", "MouseEnter", "MouseLeave",
    "MouseMoved", "MouseWheelBackward", "MouseWheelForward", "SelectionGained",
    "SelectionLost", "TouchLongPress", "TouchPan", "TouchPinch", "TouchRotate",
    "TouchSwipe", "TouchTap", "FocusLost", "Focused", "ReturnPressedFromOnScreenKeyboard",
    "Archivable", "ClassName", "Parent"
}

-- Base properties we want to copy for each class
local BASE_PROPERTIES = {
    GuiObject = {
        "Position", "Size", "AnchorPoint", "AutomaticSize", "Active", "BackgroundColor3",
        "BackgroundTransparency", "BorderColor3", "BorderSizePixel", "ClipsDescendants",
        "LayoutOrder", "Selectable", "SelectionImageObject", "SizeConstraint", "Visible",
        "ZIndex"
    },
    Frame = {},
    TextLabel = {
        "Text", "TextColor3", "TextSize", "TextWrapped", "TextXAlignment", "TextYAlignment",
        "FontFace", "LineHeight", "RichText", "TextScaled", "TextStrokeColor3",
        "TextStrokeTransparency", "TextTruncate"
    },
    TextButton = {
        "Text", "TextColor3", "TextSize", "FontFace", "AutoButtonColor"
    },
    TextBox = {
        "Text", "TextColor3", "TextSize", "TextWrapped", "ClearTextOnFocus", "MultiLine",
        "PlaceholderText", "FontFace", "CursorPosition", "PlaceholderColor3", "ShowNativeInput",
        "TextEditable"
    },
    ScrollingFrame = {
        "ScrollBarImageColor3", "ScrollBarThickness", "ScrollingDirection", "VerticalScrollBarPosition",
        "CanvasSize", "BottomImage", "MidImage", "TopImage", "LeftImage", "RightImage",
        "ScrollBarImageTransparency", "ScrollingEnabled"
    },
    ImageLabel = {
        "Image", "ImageColor3", "ImageRectOffset", "ImageRectSize", "ImageTransparency",
        "ScaleType", "SliceCenter", "TileSize"
    },
    ImageButton = {
        "Image", "ImageColor3", "ImageRectOffset", "ImageRectSize", "ImageTransparency",
        "ScaleType", "SliceCenter", "TileSize", "HoverImage", "PressedImage"
    },
    UICorner = {
        "CornerRadius"
    },
    UIStroke = {
        "Color", "Enabled", "Thickness", "Transparency", "ApplyStrokeMode", "LineJoinMode"
    },
    UIGradient = {
        "Color", "Enabled", "Offset", "Rotation", "Transparency"
    },
    UIListLayout = {
        "Padding", "SortOrder", "HorizontalAlignment", "FillDirection", "VerticalAlignment"
    },
    UIPadding = {
        "PaddingBottom", "PaddingLeft", "PaddingRight", "PaddingTop"
    },
    UIScale = {
        "Scale"
    },
    UIAspectRatioConstraint = {
        "AspectRatio", "AspectType", "DominantAxis"
    },
    UISizeConstraint = {
        "MaxSize", "MinSize"
    },
    ViewportFrame = {
        "ImageColor3", "LightColor", "LightDirection", "Ambient"
    }
}

-- Download API dump if needed
local JSON
if not pcall(function()
    JSON = game:GetService("HttpService"):JSONDecode(readfile("robloxproperties.json"))
end) then
    JSON = game:HttpGet("https://raw.githubusercontent.com/MaximumADHD/Roblox-Client-Tracker/refs/heads/roblox/Mini-API-Dump.json")
    writefile("robloxproperties.json", JSON)
    JSON = game:GetService("HttpService"):JSONDecode(JSON)
end

-- Build property list from API dump
local Properties = {}
for className, props in pairs(BASE_PROPERTIES) do
    Properties[className] = table.clone(props)
end

for _, Class in next, JSON.Classes do
    if Class.MemoryCategory == "Gui" then
        local ClassName = Class.Name
        Properties[ClassName] = Properties[ClassName] or {}
        
        for _, Property in next, Class.Members do
            local Tags = Property.Tags or {}
            if Property.MemberType == "Property" and 
               not tfind(Tags, "ReadOnly") and 
               not tfind(Tags, "Deprecated") and 
               not tfind(Tags, "Hidden") and 
               not tfind(IGNORED_PROPERTIES, Property.Name) and
               not tfind(Properties[ClassName], Property.Name) then
                tinsert(Properties[ClassName], Property.Name)
            end
        end
    end
end

-- Helper functions
local function FormatDigit(n)
    local str = tostring(n)
    if str:match("%.") then
        -- Remove trailing zeros and . if needed
        str = str:gsub("%.?0+$", "")
    end
    return str
end

local function FormatValue(value)
    local valueType = typeof(value)
    
    if valueType == "string" then
        return format("%q", value:gsub("\\", "\\\\"):gsub("\"", "\\\""):gsub("\n", "\\n"))
    elseif valueType == "number" then
        return FormatDigit(value)
    elseif valueType == "boolean" then
        return tostring(value)
    elseif valueType == "Vector2" then
        return format("Vector2.new(%s, %s)", FormatDigit(value.X), FormatDigit(value.Y))
    elseif valueType == "Vector3" then
        return format("Vector3.new(%s, %s, %s)", FormatDigit(value.X), FormatDigit(value.Y), FormatDigit(value.Z))
    elseif valueType == "UDim2" then
        return format("UDim2.new(%s, %s, %s, %s)", 
            FormatDigit(value.X.Scale), FormatDigit(value.X.Offset),
            FormatDigit(value.Y.Scale), FormatDigit(value.Y.Offset))
    elseif valueType == "UDim" then
        return format("UDim.new(%s, %s)", FormatDigit(value.Scale), FormatDigit(value.Offset))
    elseif valueType == "Color3" then
        return format("Color3.fromRGB(%d, %d, %d)", 
            math.floor(value.R * 255 + 0.5), 
            math.floor(value.G * 255 + 0.5), 
            math.floor(value.B * 255 + 0.5))
    elseif valueType == "Font" then
        return format("Font.new(%q, Enum.FontWeight.%s, Enum.FontStyle.%s)", 
            value.Family, tostring(value.Weight.Name), tostring(value.Style.Name))
    elseif valueType == "EnumItem" then
        return format("Enum.%s.%s", tostring(value.EnumType), tostring(value.Name))
    elseif valueType == "Instance" then
        if value == game then
            return "game"
        elseif value == workspace then
            return "workspace"
        elseif value == game:GetService("CoreGui") then
            return "game:GetService(\"CoreGui\")"
        else
            -- Try to build path
            local path = {}
            local current = value
            while current and current ~= game do
                table.insert(path, 1, current.Name)
                current = current.Parent
            end
            return table.concat(path, ".")
        end
    else
        return "nil --[[ Unsupported type: "..valueType.." ]]"
    end
end

local function SafeGetProperty(instance, property)
    local success, value = pcall(function()
        return instance[property]
    end)
    return success and value or nil
end

local function GetUniqueName(instance, names)
    local baseName = instance.Name
    if baseName == "" then
        baseName = instance.ClassName
    end
    
    local name = baseName
    local counter = 1
    
    while names[name] do
        counter = counter + 1
        name = baseName.." "..counter
    end
    
    names[name] = true
    return name
end

-- Main function
local function CopyGUI(gui)
    local startTime = os.clock()
    local names = {}
    local instances = {}
    local output = {"local gui = {\n"}
    
    -- First pass: create all instances and collect names
    for _, instance in ipairs({gui, unpack(gui:GetDescendants())}) do
        if Settings_NoCrash then
            wait()
        end
        
        local name = GetUniqueName(instance, names)
        instances[instance] = name
        table.insert(output, format('    ["%s"] = Instance.new("%s"),\n', name, instance.ClassName))
    end
    
    table.insert(output, "}\n\n")
    
    -- Second pass: set properties
    for instance, name in pairs(instances) do
        local classProps = Properties[instance.ClassName] or {}
        
        for _, prop in ipairs(classProps) do
            local value = SafeGetProperty(instance, prop)
            if value ~= nil then
                local defaultValue = SafeGetProperty(Instance.new(instance.ClassName), prop)
                if defaultValue == nil or value ~= defaultValue then
                    table.insert(output, format('gui["%s"].%s = %s\n', name, prop, FormatValue(value)))
                end
            end
        end
        
        -- Set Name and Parent
        table.insert(output, format('gui["%s"].Name = %s\n', name, FormatValue(instance.Name)))
        
        if instance == gui then
            table.insert(output, format('gui["%s"].Parent = %s\n', name, FormatValue(instance.Parent)))
        else
            local parentName = instances[instance.Parent]
            if parentName then
                table.insert(output, format('gui["%s"].Parent = gui["%s"]\n', name, parentName))
            end
        end
        
        table.insert(output, "\n")
    end
    
    local result = table.concat(output)
    local elapsedTime = os.clock() - startTime
    return result, elapsedTime
end

return CopyGUI